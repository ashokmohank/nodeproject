type accessToken implements Node {
  # The ID of an object
  id: ID!
  userId: [User]
  token: String
  clientId: String
  users(after: String, first: Int, before: String, last: Int, search: String): UserConnection
}

type Mutation {
  addUser(data: UserInputType!): Boolean
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  user(id: String): User
  users(userId: String): [User]
  test(userId: String): accessToken
  tests(userId: String): [accessToken]

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type User implements Node {
  # The ID of an object
  id: ID!
  _id: String
  hashedPassword: String
  username: String
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]
  count: Int
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge
  node: User

  # A cursor for use in pagination
  cursor: String!
}

input UserInputType {
  _id: String
  hashedPassword: String
  username: String
  salt: String
}
